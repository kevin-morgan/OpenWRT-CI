# =================================================
# https://github.com/kevin-morgan/OpenWRT-CI
# Description: OpenWRT Con­tin­u­ous In­te­gra­tion with GitHub Actions
# Lisence: MIT
# Author: Kevin MORGAN
# Email: kevin_morgan@outlook.com
# =================================================

name: Build OpenWRT

on:
#  push:
#    branches:
#      - master
#    tags:
#      - 'v*'
#    paths:
#      - '.config'
#  schedule:
#    - cron: 0 20 * * *
  release:
    types: [published]
  watch:
    types: [started]


env:
#  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_URL: https://github.com/kevin-morgan/lede
  REPO_BRANCH: master
  CONFIG_FILE: x86_64.config
  CUSTOM_SH: custom.sh
  FREE_UP_DISK: true
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: false
  TIMEZONE: Asia/Shanghai

jobs:

  build:

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler

    - name: Free Up Disk Space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet
        docker rmi `docker images -q`
        sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        echo "======================="
        echo "Space Usage:"
        echo "======================="
        df -h
        echo "======================="

    - name: Clone Source Code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update Feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install Feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |

        rm -f ./.config*
        touch ./.config

        # COMPILE x86_64 FIRMWARE
        cat >> .config <<EOF
        CONFIG_TARGET_x86=y
        CONFIG_TARGET_x86_64=y
        CONFIG_TARGET_x86_64_Generic=y
        EOF

        # UEFI FIRMWARE:
        cat >> .config <<EOF
        CONFIG_EFI_IMAGES=y
        EOF

        # IMAGE COMPRESSION
        cat >> .config <<EOF
        CONFIG_VMDK_IMAGES=y
        CONFIG_TARGET_IMAGES_GZIP=y
        EOF

        # IPv6 SUPPIRT
        cat >> .config <<EOF
        CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
        CONFIG_PACKAGE_ipv6helper=y
        EOF

        # FILE SYSTEM SUPPORT
        cat >> .config <<EOF
        CONFIG_PACKAGE_kmod-fs-nfs=y
        CONFIG_PACKAGE_kmod-fs-nfs-common=y
        CONFIG_PACKAGE_kmod-fs-nfs-v3=y
        CONFIG_PACKAGE_kmod-fs-nfs-v4=y
        CONFIG_PACKAGE_kmod-fs-ntfs=y
        CONFIG_PACKAGE_kmod-fs-squashfs=y
        EOF

        # USB SUPPORT
        cat >> .config <<EOF
        CONFIG_PACKAGE_kmod-usb-ohci=y
        CONFIG_PACKAGE_kmod-usb-ohci-pci=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb2-pci=y
        CONFIG_PACKAGE_kmod-usb3=y
        EOF

        # LuCI THEMES
        cat >> .config <<EOF
        CONFIG_PACKAGE_luci-theme-argon=y
        CONFIG_PACKAGE_luci-theme-argon-dark=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        EOF

        # LuCI APPS
        cat >> .config <<EOF
        CONFIG_PACKAGE_luci-app-acme=y
        CONFIG_PACKAGE_luci-app-filetransfer=y
        CONFIG_PACKAGE_luci-app-netdata=y
        CONFIG_PACKAGE_luci-app-nps=y
        CONFIG_PACKAGE_luci-app-ocserv=y
        CONFIG_PACKAGE_luci-app-passwall=y
        CONFIG_PACKAGE_luci-app-serverchan=y
        CONFIG_PACKAGE_luci-app-ttyd=y
        EOF

        # LuCI UTILITIES
        cat >> .config <<EOF
        CONFIG_PACKAGE_curl=y
        CONFIG_PACKAGE_htop=y
        CONFIG_PACKAGE_nano=y
        CONFIG_PACKAGE_screen=y
        CONFIG_PACKAGE_tree=y
        CONFIG_PACKAGE_vim-fuller=y
        CONFIG_PACKAGE_wget=y
        EOF

        chmod +x $CUSTOM_SH
        cd openwrt
        ../$CUSTOM_SH

        sed -i 's/^[ \t]*//g' ./.config
        make defconfig

    - name: SSH connection to Actions
      uses: kevin-morgan/action-debugger@master
      if: env.SSH_ACTIONS == 'true'

    - name: Download Packages
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo "======================="
        echo "Space Usage:"
        echo "======================="
        df -h
        echo "======================="
        echo $PWD "exclude ./build_dir & ./bin"
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        echo "======================="
        echo $PWD"/build_dir"
        du -h --max-depth=1 ./build_dir

    - name: Compile The Firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"
        echo "======================="
        echo "Space Usage:"
        echo "======================="
        df -h
        echo "======================="
        echo $PWD "exclude ./build_dir & ./bin"
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        echo "======================="
        echo $PWD"/build_dir"
        du -h --max-depth=1 ./build_dir
        echo "======================="
        echo $PWD"/bin"
        du -h --max-depth=1 ./bin

    - name: Upload bin Directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_directory
        path: openwrt/bin

    - name: Organize Files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"

    - name: Upload Firmware Directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}


